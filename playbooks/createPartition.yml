---
- name: Create partition & add default directories 
  hosts: all
  become: true

  tasks:
    # Retrieve the device info so we can define the number, part_start & part_end for the partition
  - name: Read device information of /dev/xvdf
    parted: device=/dev/xvdf unit=MiB
    register: device_info
    no_log: true
  # Retrieves disk list
  - name: get disk list
    shell: "parted -l"
    register: disks
    no_log: true
  # Prints out the available disks
  - name: Display parted list
    debug:
      msg: "{{ disks.stdout.split('\n') }}"
  # retrieve what disk needs to be used
  - pause:
      prompt: "Please enter the disk name you wish to use"
      echo: yes
    register: result
  - set_fact:
      device: "{{ result.user_input }}"
    no_log: true
  # test with ls to see if disk exists
  - name: Check if disk exists
    shell: "ls {{ device }}"
  - debug:
      msg: "Using device: {{ device }}"
  # get and show available disk space
  - name: get free space of chosen device
    shell: "parted {{ device }} unit MB print free | grep 'Free Space' | tail -n1 | awk '{print \"Free space: \" $3}'"
    register: freeSpace
  - debug:
      msg: "{{ freeSpace.stdout }}"
  # retrieve what disk needs to be used
  - pause:
      prompt: "Please provide partition size in MB format"
      echo: yes
    register: size
  - set_fact:
      device: "{{ size.user_input }}"
    no_log: true
  # Create a partition with the provided size
  - name: Create a new primary partition with provided size
    parted:
      device: /dev/xvdf
      number: "{{ device_info.partitions | length + 1 }}"
      state: present
      part_start: "{% if device_info.partitions | length > 0 %}{{ device_info.partitions[-1].end + 1 }}MiB{% else %}0%{% endif %}"
      part_end: "{% if device_info.partitions | length > 0 %}{{ device_info.partitions[-1].end + 1 + size }}MiB{% else %}{{ size }}MB{% endif %}"
  # Formats the new partition to XFS
  - name: format the new partition to xfs
    filesystem:
     fstype: xfs
     dev: "/dev/xvdf{{ device_info.partitions | length + 1 }}"
  # Creates a mount directory for the new partition
  - name: Create a mount directory
    file:
      path: "/mt/xvdf{{ device_info.partitions | length + 1}}"
      state: directory
      mode: '0755'
  # Mounts the newly created partition
  - name: Mount new partition
    mount:
      fstype: xfs
      src: "/dev/xvdf{{ device_info.partitions | length + 1 }}"
      path: "/mt/xvdf{{ device_info.partitions | length + 1 }}"
      state: mounted
  # These tasks ensure we have the default directories
  - name: Create /appl directory
    file:
      path: "/mt/xvdf{{ device_info.partitions | length + 1 }}/appl"
      state: directory
      mode: '0755'
  - name: Create /apps directory
    file:
      path: "/mt/xvdf{{ device_info.partitions | length + 1 }}/apps"
      state: directory
      mode: '0755'
  - name: Create /data directory
    file:
      path: "/mt/xvdf{{ device_info.partitions | length + 1 }}/data"
      state: directory
      mode: '0755'